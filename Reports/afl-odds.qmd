---
title: "AFL Odds"
execute:
  echo: false
  message: false
  warning: false
author: "James Brown"
date: "`r Sys.Date()`"
format:
  html:
    df-print: kable
    page-layout: full
    theme: cosmo
    self-contained: true
    toc: true
    toc-depth: 3
    fig-width: 8
    fig-height: 6
editor: source
---

**Last Updated: `r format(Sys.time(), "%I:%M %p")`**

```{r setup, include=FALSE}
# Load necessary libraries for data manipulation, reporting, and interactive tables
library(tidyverse)
library(qreport) # Assuming this is a custom package with the maketabs function
library(DT) # Used for creating interactive HTML tables
library(readxl)
library(gt) # Kept in case any legacy gt tables are needed

# Load data from RDS files
h2h_data <- read_rds("../Data/processed_odds/all_h2h.rds")
line_data <- read_rds("../Data/processed_odds/all_line.rds")
player_disposals_data <- read_rds("../Data/processed_odds/all_player_disposals.rds")
player_goals_data <- read_rds("../Data/processed_odds/all_player_goals.rds")
player_fantasy_data <- read_rds("../Data/processed_odds/all_player_fantasy_points.rds")
player_marks_data <- read_rds("../Data/processed_odds/all_player_marks.rds")
player_tackles_data <- read_rds("../Data/processed_odds/all_player_tackles.rds")

```

```{r data-prep-dvp}
# Read in DVP (Defense vs. Position) data
dvp_data <-
  read_csv("../DVP/dvp_data.csv")

# Read in player position data
player_positions <-
  read_csv("../DVP/AFL-Players-Positions-2025.csv") |> 
  rename(Position = position, player_name = player_full_name)

# Process DVP data to create categories
dvp_data <-
  dvp_data %>%
  # Adding random noise to goals for categorization example; can be adjusted
  mutate(dvp = ifelse(market_name == "Player Goals", rnorm(nrow(dvp_data)), dvp)) |> 
  group_by(market_name) %>%
  mutate(
    DVP_Category = cut(
      dvp,
      breaks = quantile(dvp, probs = 0:5/5, na.rm = TRUE),
      include.lowest = TRUE,
      labels = c("Terrible", "Bad", "Neutral", "Good", "Excellent")
    )
  ) %>%
    mutate(DVP_Category = as.character(DVP_Category)) |> 
    mutate(DVP_Category = ifelse(market_name == "Player Goals", "Neutral", DVP_Category)) |> 
  ungroup() %>%
  select(Position = Pos, opposition_team = Opponent, market_name, DVP_Category)

```

```{r data-prep-markets}
# Combine all player market data into a single data frame
all_markets <- bind_rows(
    player_disposals_data,
    player_goals_data,
    player_fantasy_data,
    player_marks_data,
    player_tackles_data
  )

# Select, arrange, and round columns for consistency and readability
all_markets <-
all_markets |>
  select(
    match,
    player_name,
    player_team,
    opposition_team,
    market_name,
    over_price,
    implied_prob_over,
    under_price,
    implied_prob_under,
    line,
    agency,
    diff_over_2024,
    diff_over_last_10,
    diff_under_2024,
    diff_under_last_10
  ) |>
  # Round decimal values to 3 places
  mutate(across(where(is.numeric) & !c(line), ~round(.x, 3))) |>
  arrange(match, player_name, market_name, line, desc(over_price))

# Join with position and DVP data
all_markets <-
all_markets |>
left_join(player_positions, relationship = "many-to-one") |>
  left_join(dvp_data, by = c("opposition_team", "Position", "market_name"), relationship = "many-to-one") |> 
  relocate(Position, DVP_Category, .after = player_name)
```

```{r data-prep-diffs}
# Calculate the biggest differences between the best and second-best odds available
biggest_diffs <-
  all_markets |>
  group_by(match, player_name, market_name, line) |> 
  distinct(match, player_name, market_name, line, agency, .keep_all = TRUE) |> 
  mutate(number_of_odds = n()) |>
  mutate(best_implied_prob_over = implied_prob_over,
         second_best_implied_prob_over = lead(implied_prob_over, 1),
         second_best_odds = lead(over_price, 1)) |>
  slice_head(n = 1) |> 
  ungroup() |> 
  # Calculate and round the difference
  mutate(diff_over = round(second_best_implied_prob_over - best_implied_prob_over, 3)) |>
  select(-number_of_odds, -best_implied_prob_over, -second_best_implied_prob_over) |>
  arrange(desc(diff_over), match, player_name, market_name, line) |> 
  relocate(second_best_odds, .after = over_price)
```

::: panel-tabset

## H2H

```{r h2h-table}
#| results: asis

# Process data - home teams
home_df <- h2h_data %>%
  select(match, round, start_time, venue, home_team, home_win, home_agency) %>%
  rename(team = home_team, win_odds = home_win, agency = home_agency) |> 
  distinct(match, team, win_odds, agency, .keep_all = TRUE)

# Process data - away teams
away_df <- h2h_data %>%
  select(match, round, start_time, venue, away_team, away_win, away_agency) %>%
  rename(team = away_team, win_odds = away_win, agency = away_agency) |> 
  distinct(match, team, win_odds, agency, .keep_all = TRUE)

# Combine and reshape data
combined_df <- bind_rows(home_df, away_df)

# Pivot to create columns for each agency
odds_table <-
  combined_df %>%
  pivot_wider(
    id_cols = c(match, round, start_time, venue, team),
    names_from = agency,
    values_from = win_odds
  ) %>%
  arrange(start_time, match) |>
  # Format date for better display
  mutate(start_time = format(as.Date(start_time), "%A, %B %d, %Y"))

# Create an interactive DT table without export buttons
datatable(
  odds_table,
  rownames = FALSE,
  filter = 'top',
  extensions = 'RowGroup',
  width = "100%",
  options = list(
    pageLength = 20,
    dom = 'frtip', # Removed 'B' to hide buttons
    autoWidth = FALSE,
    # Group rows by match (column index 1)
    rowGroup = list(dataSrc = 0),
    # Hide the match column as it's used for grouping
    columnDefs = list(list(visible = FALSE, targets = 0)),
    order = list(list(0, 'asc')) # Order by the hidden match column
  ),
  class = 'display cell-border stripe compact'
)
```

## Line

```{r line-table}
#| results: asis

# Process data - home teams
home_df <- line_data %>%
  select(match, home_team, home_line, home_win, agency) %>%
  rename(team = home_team, line = home_line, win_odds = home_win) |>
  distinct(match, team, line, win_odds, agency, .keep_all = TRUE)

# Process data - away teams
away_df <- line_data %>%
  select(match, away_team, away_line, away_win, agency) %>%
  rename(team = away_team, line = away_line, win_odds = away_win) |>
  distinct(match, team, line, win_odds, agency, .keep_all = TRUE)

# Combine and reshape data
combined_df <- bind_rows(home_df, away_df)

# Pivot to create columns for each agency
odds_table <-
  combined_df %>%
  pivot_wider(
    id_cols = c(match, team, line),
    names_from = agency,
    values_from = win_odds
  ) %>%
  arrange(match)

# Create an interactive DT table for Line odds without export buttons
datatable(
  odds_table,
  rownames = FALSE,
  filter = 'top',
  extensions = 'RowGroup',
  width = "100%",
  options = list(
    pageLength = 20,
    dom = 'frtip', # Removed 'B'
    autoWidth = FALSE,
    # Group rows by match (column index 1)
    rowGroup = list(dataSrc = 0),
    # Hide the match column as it's used for grouping
    columnDefs = list(list(visible = FALSE, targets = 0)),
    order = list(list(0, 'asc'))
  ),
  class = 'display cell-border stripe compact'
)
```

## +EV Bets

```{r ev-bets-table}
#| results: asis

# Filter for bets with a positive expected value based on last 10 games
biggest_diffs_outliers <-
  biggest_diffs |>
  filter(diff_over_last_10 >= 0) |>
  arrange(desc(diff_over_last_10)) |> 
  rename(gap = diff_over) |> 
  filter(gap > 0)

# Function to filter data frame by agency
filter_agency <- function(df, agency_name) {
  df |>
    filter(agency == !!agency_name)
}

# Get a unique list of agencies present in the filtered data
agencies <- biggest_diffs_outliers$agency |> unique()

# Create a named list of dataframes, one for each agency
agency_list <- map(agencies, ~filter_agency(biggest_diffs_outliers, .x)) |> set_names(agencies)

# For each element of the list, make an interactive DT table
agency_list_dt <-
  map(agency_list, ~ datatable(
    .x,
    rownames = FALSE,
    filter = 'top',
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      scrollX = TRUE,
      width = "100%",
      dom = 'frtip' # Removed 'B'
    ),
    class = 'display cell-border stripe compact'
  ))

# Make tabset with each interactive table
maketabs(agency_list_dt, wide = TRUE)
```

## Biggest Outliers By Agency

```{r outliers-table}
#| results: asis

# Filter for significant outliers (implied probability diff > 3%)
biggest_diffs_outliers <-
  biggest_diffs |>
  filter(diff_over >= 0.03) |>
  arrange(desc(diff_over)) |> 
  rename(gap = diff_over)

# Function to filter data frame by agency
filter_agency <- function(df, agency_name) {
  df |>
    filter(agency == !!agency_name)
}

# Get a unique list of agencies
agencies <- biggest_diffs_outliers$agency |> unique()

# Create a named list of dataframes
agency_list <- map(agencies, ~filter_agency(biggest_diffs_outliers, .x)) |> set_names(agencies)

# For each element of the list, make an interactive DT table
agency_list_dt <-
  map(agency_list, ~ datatable(
    .x,
    rownames = FALSE,
    filter = 'top',
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      scrollX = TRUE,
      width = "100%",
      dom = 'frtip' # Removed 'B'
    ),
    class = 'display cell-border stripe compact'
  ))

# Make tabset with each interactive table
maketabs(agency_list_dt, wide = TRUE)
```

## Biggest Outliers +EV

```{r outliers-ev-table}
#| results: asis

# Filter for bets that are both outliers AND have positive EV
biggest_diffs_outliers <-
  biggest_diffs |>
  filter(diff_over_last_10 >= 0) |>
  filter(diff_over >= 0.03) |>
  arrange(desc(diff_over)) |> 
  rename(gap = diff_over)

# Function to filter data frame by agency
filter_agency <- function(df, agency_name) {
  df |>
    filter(agency == !!agency_name)
}

# Get a unique list of agencies
agencies <- biggest_diffs_outliers$agency |> unique()

# Create a named list of dataframes
agency_list <- map(agencies, ~filter_agency(biggest_diffs_outliers, .x)) |> set_names(agencies)

# For each element of the list, make an interactive DT table
agency_list_dt <-
  map(agency_list, ~ datatable(
    .x,
    rownames = FALSE,
    filter = 'top',
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      scrollX = TRUE,
      width = "100%",
      dom = 'frtip' # Removed 'B'
    ),
    class = 'display cell-border stripe compact'
  ))

# Make tabset with each interactive table
maketabs(agency_list_dt, wide = TRUE)
```

## Discrepant Lines

```{r discrepant-lines-table}
#| results: asis

# Get all lines
all_lines <- all_markets

# Get Overs data
over_lines <-
  all_lines |> 
  filter(!is.na(over_price)) |>
  select(match, player_name, player_team, opposition_team, market_name, over_price, over_line = line, over_agency = agency) |> 
  # Specific adjustment for TAB's disposal lines
  mutate(over_line = ifelse(over_agency == "TAB" & market_name == "Player Disposals", over_line - 1, over_line))

# Get Unders data
under_lines <-
  all_lines |> 
  filter(!is.na(under_price)) |>
  select(match, player_name, player_team, opposition_team, market_name, under_price, under_line = line, under_agency = agency)

# Combine and find discrepancies
discrepant_lines <-
  over_lines |>
  left_join(under_lines, by = c("match", "player_name", "player_team", "opposition_team", "market_name"), relationship = "many-to-many") |>
  mutate(diff = (under_line - over_line)) |> 
  filter(diff > 0) |> 
  mutate(margin = 1/over_price + 1/under_price) |>
  # Calculate and round margin
  mutate(margin = round(100*(margin - 1), 2)) |>
  arrange(desc(diff), margin, match, player_name, market_name) |> 
  filter(margin <= 15)

# Display as an interactive table
datatable(
  discrepant_lines,
  rownames = FALSE,
  filter = 'top',
  width = "100%",
  options = list(
    pageLength = 25,
    scrollX = TRUE,
    autoWidth = FALSE, # Prevent automatic column width calculation
    dom = 'frtip'
  ),
  class = 'display cell-border stripe compact'
)
```

## Unders

```{r unders-table}
#| results: asis

# Get biggest differences for "under" bets
biggest_diffs_under <-
  all_markets |>
    filter(!is.na(under_price)) |> 
    arrange(match, player_name, market_name, line, desc(under_price)) |>
    group_by(match, player_name, market_name, line) |> 
    distinct(match, player_name, market_name, line, agency, .keep_all = TRUE) |> 
    mutate(number_of_odds = n()) |>
    mutate(best_implied_prob_under = implied_prob_under,
           second_best_implied_prob_under = lead(implied_prob_under, 1),
           second_best_odds = lead(under_price, 1)) |>
    slice_head(n = 1) |> 
    ungroup() |> 
    # Calculate and round difference
    mutate(diff_under = round(second_best_implied_prob_under - best_implied_prob_under, 3)) |>
    select(-number_of_odds, -best_implied_prob_under, -second_best_implied_prob_under) |>
    arrange(desc(diff_under), match, player_name, market_name, line) |> 
    relocate(second_best_odds, .after = under_price)

# Filter for +EV unders
biggest_diffs_outliers <-
  biggest_diffs_under |>
  filter(diff_under_last_10 >= 0) |>
  arrange(desc(diff_under_last_10))

# Function to filter data frame by agency
filter_agency <- function(df, agency_name) {
  df |>
    filter(agency == !!agency_name)
}

# Get a unique list of agencies
agencies <- biggest_diffs_outliers$agency |> unique()

# Create a named list of dataframes
agency_list <- map(agencies, ~filter_agency(biggest_diffs_outliers, .x)) |> set_names(agencies)

# For each element of the list, make an interactive DT table
agency_list_dt <-
  map(agency_list, ~ datatable(
    .x,
    rownames = FALSE,
    filter = 'top',
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      scrollX = TRUE,
      width = "100%",
      dom = 'frtip' # Removed 'B'
    ),
    class = 'display cell-border stripe compact'
  ))

# Make tabset with each, with error handling
tryCatch({
  maketabs(agency_list_dt, wide = TRUE)
}, error = function(e) {
  print("No 'Under' opportunities found to display.")
  print(e)
})
```

## Arbs

::: panel-tabset

## Dabble

```{r dabble-arbs-table}
#| results: asis

# Read arbitrage data
arbs <- read_csv("../Data/all_arbs.csv")

# Process and display Dabble arbs in an interactive table
arbs |> 
  filter(over_agency == "Dabble" | under_agency == "Dabble") |>
  relocate(over_line, .before = over_agency) |> 
  relocate(under_line, .after = under_agency) |>
  datatable(
    rownames = FALSE,
    filter = 'top',
    width = "100%",
    options = list(
      pageLength = 25,
      autoWidth = FALSE,
      scrollX = TRUE,
      dom = 'frtip' # Removed 'B'
    ),
    class = 'display cell-border stripe compact'
  )
```

## Others

```{r other-arbs-table}
#| results: asis

# Process and display other arbs in an interactive table
arbs |> 
  filter(over_agency != "Dabble" & under_agency != "Dabble") |> 
  relocate(over_line, .before = over_agency) |> 
  relocate(under_line, .after = under_agency) |>
  datatable(
    rownames = FALSE,
    filter = 'top',
    width = "100%",
    options = list(
      pageLength = 25,
      autoWidth = FALSE,
      scrollX = TRUE,
      dom = 'frtip' # Removed 'B'
    ),
    class = 'display cell-border stripe compact'
  )
```

:::

:::
